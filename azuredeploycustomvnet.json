{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "2.0.1.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "uksouth",
        "allowedValues": [
          "ukwest",
          "uksouth"
        ],
        "metadata": {
          "description": "Location to store the resource group and all vm's."
        }
      },
      "virtualMachineName": {
        "type": "string",
        "maxLength": 10,
        "metadata": {
          "description": "Virtual Machine name e.g. 306Client."
        }
      },
      "virtualMachineCount": {
          "type": "int",
          "maxValue": 14,
          "metadata": {
            "decription": "Number of Virtual Machines required e.g. 5"
          }
      },
      "newOrExistingVnet": {
        "type": "string",
        "allowedValues": [
          "NewVnet",
          "ExistingVnet"
        ],
        "metadata":{
          "description": "Creates a new or use an existing Vnet"
        }
      },
      "existingVNetName":{
        "type": "string",
        "defaultValue": "L4_Network_Architechture-vnet",
        "metadata":{
          "description": "Input the name of the existing VNet to be used"
        }
      },
      "existingVNetSubnet":{
        "type": "string",
        "defaultValue": "default",
        "metadata":{
          "description": "Input the name of the exisiting subnet to be used"
        }
      },
      "existingVNetResourceGroup":{
        "type": "string",
        "defaultValue": "L4_Network_Architechture",
        "metadata":{
            "description": "This should be the name of the current resource group"
        }
      },
      "createdBy":{
        "type": "string",
        "metadata": {
          "description": "Please enter your name 'Firstname Surname'"
        }
      },
      "trainerInitials": {
        "type": "string",
        "minLength": 2,
        "metadata": {
          "description": "Trainer initials used to create a unique resources."
        }
      },
      "osDiskType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS"
        ],
        "metadata": {
          "description": "Type of storage Standard HDD, SSD or Premium."
        }
      },
      "virtualMachineSize": {
        "type": "string",
        "defaultValue": "Standard_D2s_v3",
        "allowedValues": [
          "Standard_D2_v3",
          "Standard_D2s_v3",
          "Standard_DS3_v2"
        ],
        "metadata": {
          "description": "Virtual Machine size."
        }
      },
      "platform": {
          "type": "string",
          "allowedValues": [
              "Windows",
              "Linux"
          ],
          "metadata": {
            "description": "Select the custom OS type to deploy"
          }
      },
      "operatingSystem": {
        "type": "string",
        "allowedValues": [
          "CustomWindowsDesktop",
          "CustomWindowsServer2012R2",
          "CustomWindowsServer2016",
          "CustomUbuntuServer"
        ],
        "metadata": {
          "description": "Choose your operating system."
        }
      },
      "virtualMachineAdminUsername": {
        "type": "string",
        "metadata": {
          "description": "Admin username for the Virtual Machine."
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "Password",
        "allowedValues": [
            "Password",
            "sshPublicKey"
        ],
        "metadata": {
          "descriptopn": "The type of authentication used on the virtual machine. SSH is recommended for Linux VMs"
        }
    },
      "virtualMachineAdminPasswordOrSsh": {
        "type": "securestring",
        "metadata": {
          "description": "Admin password for the Virtual Machine. If Linux SSH is recommended."
        }
      }      
    },
    "variables": {
      "networkSecurityGroupName": "[concat(resourceGroup().name, '-nsg')]",
      "vmNamePrefix": "[toUpper(concat(parameters('virtualMachineName'), parameters('trainerInitials')))]",
      "virtualNetworkName": "[concat(resourceGroup().name, '-vnet')]",
      "addressPrefixes": "10.0.0.0/16",
      "subnetsAddressPrefix": "10.0.0.0/24",
      "subnetName": "Default",
      "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
      "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
      "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",
      "operatingSystemValues": {
        "CustomWindowsDesktop": {
            "imageValue": "BAT-W10PRO-Image"
        },
        "CustomWindowsServer2012R2": {
            "imageValue": "BAT-WS2K12R2-Image"
        },
        "CustomWindowsServer2016": {
            "imageValue": "2016BrianB-image-20190731124458"
        },
        "CustomUbuntuServer": {
            "imageValue": "BAT-Ubuntu-Image"
        }
    },
    "windowsConfiguration": {
        "enableAutomaticUpdates": true,
        "provisionVMAgent": true,
        "timeZone": "GMT Standard Time"
    },
    "windowsLicense": "Windows_Client",
    "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
            "publicKeys": [
                {
                    "path": "[concat('/home/', parameters('virtualMachineAdminUsername'), '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('virtualMachineAdminPasswordOrSsh')]"
                }
            ]
        }
    },
    "allowRDP":{
      "securityRules": [
        {
          "name": "Allow-RDP",
          "properties": {
            "priority": 300,
            "protocol": "Tcp",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "3389"
          }
        }
      ]
    },
    "allowSSH": {
      "securityRules": [
        {
          "name": "Allow-SSH",
          "properties": {
            "priority": 310,
            "protocol": "Tcp",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "22"
          }
        }
      ]
    },
      "_artifactsLocation": "https://raw.githubusercontent.com/balticapprenticeships/Azure-Extensions/master/"
    },
    "resources": [
      {
        "apiVersion": "2018-10-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('vmNamePrefix'), copyIndex(1), '-nic')]",     
        "location": "[parameters('location')]",
        "tags": {
          "DisplayName": "NetworkInterface",
          "Dept" : "[resourceGroup().tags['Dept']]",
          "Created By" : "[parameters('createdBy')]"
        },
        "copy": {
            "name": "nicLoop",
            "count": "[parameters('virtualMachineCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
          "[concat('Microsoft.Network/publicIpAddresses/', variables('vmNamePrefix'), copyindex(1), '-ip')]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "subnet": {
                  "id": "[variables('subnetRef')]"
                },
                "privateIPAllocationMethod": "Dynamic",
                "publicIpAddress": {
                  "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', concat(variables('vmNamePrefix'), copyIndex(1), '-ip'))]"
                }
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[variables('nsgId')]"
          }
        }
      },
      {
        "apiVersion": "2019-02-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('networkSecurityGroupName')]",      
        "location": "[parameters('location')]",
        "tags": {
          "DisplayName": "NetworkSecurityGroup",
          "Dept" : "[resourceGroup().tags['Dept']]",
          "Created By" : "[parameters('createdBy')]"
        },
        "properties": "[if(equals(parameters('platform'), 'Windows'), variables('allowRDP'), variables('allowSSH'))]"
      },
      {
        "condition": "[equals(parameters('newOrExistingVnet'), 'newVnet')]",
        "apiVersion": "2019-04-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",      
        "location": "[parameters('location')]",
        "tags": {
          "DisplayName": "VirtualNetwork",
          "Dept" : "[resourceGroup().tags['Dept']]",
          "Created By" : "[parameters('createdBy')]"
        },        
        "properties": {
            "addressSpace": {
            "addressPrefixes": [
                "[variables('addressPrefixes')]"
            ]
            },
            "subnets": [
            {
                "name": "[variables('subnetName')]",
                "properties": {
                "addressPrefix": "[variables('subnetsAddressPrefix')]"
                }
            }
            ]
        }
      },
      {
        "apiVersion": "2019-02-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat(variables('vmNamePrefix'), copyIndex(1), '-ip')]",      
        "location": "[parameters('location')]",
        "tags": {
          "DisplayName": "PublicIPAddress",
          "Dept" : "[resourceGroup().tags['Dept']]",
          "Created By" : "[parameters('createdBy')]"
        },
        "copy": {
            "name": "publicIpNameLoop",
            "count": "[parameters('virtualMachineCount')]"
        },
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat('baltic-', variables('vmNamePrefix'), copyindex(1)))]"
          }
        },
        "sku": {
          "name": "Basic"
        }
      },
      { 
        "apiVersion": "2018-10-01",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(variables('vmNamePrefix'), copyindex(1))]",      
        "location": "[parameters('location')]",
        "tags": {
          "DisplayName": "VirtualMachine",
          "Dept" : "[resourceGroup().tags['Dept']]",
          "Created By" : "[parameters('createdBy')]"
        },
        "copy": {
            "name": "virtualMachineLoop",
            "count": "[parameters('virtualMachineCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('vmNamePrefix'), copyindex(1), '-nic')]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('virtualMachineSize')]"
          },
          "storageProfile": {
            "osDisk": {
              "name": "[concat(variables('vmNamePrefix'), copyIndex(1), '-osdisk')]",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('osDiskType')]"
              }
            },
            "imageReference": {
                "id": "[concat('/subscriptions/822ba9e4-c8d6-4bba-b7bc-8e6786d172e3/resourceGroups/L4_Network_Architechture/providers/Microsoft.Compute/images/', variables('operatingSystemValues')[parameters('operatingSystem')].imageValue)]"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmNamePrefix'), copyIndex(1), '-nic'))]"
              }
            ]
          },
          "osProfile": {
            "computerName": "[concat(variables('vmNamePrefix'), copyIndex(1))]",
            "adminUsername": "[parameters('virtualMachineAdminUsername')]",
            "adminPassword": "[if(equals(parameters('authenticationType'), 'Password'), parameters('virtualMachineAdminPasswordOrSsh'), json('null'))]",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'Password'), json('null'), variables('linuxConfiguration'))]",
            "windowsConfiguration": "[if(equals(parameters('platform'), 'Windows'), variables('windowsConfiguration'), json('null'))]"
          },
          "licenseType": "[if(equals(parameters('operatingSystem'), 'CustomWindowsDesktop'), variables('windowsLicense'), json('null'))]",
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": false
            }
          }
        }
      },          
      {
        "apiVersion": "2017-04-26-preview",
        "type": "Microsoft.DevTestLab/schedules",
        "name": "[concat('shutdown-computevm-', variables('vmNamePrefix'),  copyIndex(1))]",      
        "location": "[parameters('location')]",
        "tags": {
          "DisplayName": "ShutdownSchedule",
          "Dept" : "[resourceGroup().tags['Dept']]",
          "Created By" : "[parameters('createdBy')]"
        },
        "copy": {
            "name": "shutdownLoop",
            "count": "[parameters('virtualMachineCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'), copyIndex(1))]"
        ],
        "properties": {
          "status": "Enabled",
          "taskType": "ComputeVmShutdownTask",
          "dailyRecurrence": {
            "time": "17:00"
          },
          "timeZoneId": "GMT Standard Time",
          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmNamePrefix'), copyIndex(1)))]",
          "notificationSettings": {
            "status": "Disabled",
            "notificationLocale": "en",
            "timeInMinutes": "30"
          }
        }
      }
    ],
    "outputs": {
      "VirtualMachineDomain":{
        "type": "string",
        "value": ""
      }
    }
  }